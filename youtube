<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>YouTube Card Generator</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f7fc;
      padding: 20px;
      margin: 0;
    }

    h2 {
      font-size: 24px;
      color: #333;
      text-align: center;
      margin-bottom: 20px;
    }

    input, button {
      padding: 10px;
      font-size: 16px;
      margin: 8px 0;
      width: 100%;
      max-width: 600px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
      outline: none;
    }

    input:focus, button:focus {
      border-color: #065fd4;
    }

    button {
      background-color: #065fd4;
      color: #fff;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      background-color: #0048a0;
      transform: scale(1.05);
    }

    button:active {
      transform: scale(1);
    }

    button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .video-card {
      display: flex;
      max-width: 600px;
      margin-top: 20px;
      border-radius: 8px;
      background-color: #fff;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 12px;
      transition: transform 0.3s ease;
    }

    .video-card:hover {
      transform: scale(1.02);
    }

    .thumbnail {
      width: 168px;
      height: 94px;
      margin-right: 16px;
      position: relative;
      border-radius: 6px;
      overflow: hidden;
    }

    .thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 6px;
    }

    .duration {
      position: absolute;
      bottom: 4px;
      right: 4px;
      background: rgba(0, 0, 0, 0.8);
      color: #fff;
      font-size: 12px;
      padding: 2px 6px;
      border-radius: 3px;
    }

    .info {
      flex: 1;
    }

    .title {
      font-weight: bold;
      font-size: 16px;
      color: #065fd4;
      text-decoration: none;
      margin-bottom: 8px;
    }

    .title:hover {
      text-decoration: underline;
    }

    .meta {
      font-size: 12px;
      color: #666;
      margin-top: 4px;
    }

    .channel-name {
      font-size: 13px;
      color: #333;
      margin-top: 6px;
    }

    .code-output {
      margin-top: 30px;
      background: #f9f9f9;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .code-output pre {
      margin: 0;
      white-space: pre-wrap;
      word-wrap: break-word;
      color: #333;
      font-family: 'Courier New', Courier, monospace;
      background-color: #eaeaea;
      padding: 10px;
      border-radius: 6px;
    }
  </style>
</head>
<body>

  <h2>YouTube Video Card Generator (Live)</h2>

  <!-- Input Field for YouTube URL -->
  <input type="text" id="ytlink" placeholder="Paste YouTube link here">

  <!-- Action Buttons -->
  <button onclick="generateCard()">Generate</button>
  <button onclick="clearOutput()">Clear</button>
  <button onclick="copyCode()">Copy Code</button>

  <!-- Output Display for Video Card -->
  <div id="output"></div>

  <!-- Generated HTML Code Output -->
  <div id="code-output" class="code-output" style="display:none;">
    <h3>Generated HTML Code</h3>
    <pre id="code-text"></pre>
  </div>

  <!-- Script for handling the logic -->
  <script>
    const API_KEY = "AIzaSyDv1ysHij88N4mJUITp1XIGSFAi7y7EitI";  // Replace with your actual YouTube API key

    function getVideoId(url) {
      const regex = /(?:v=|youtu\.be\/)([^&\n?#]+)/;
      const match = url.match(regex);
      return match ? match[1] : null;
    }

    async function generateCard() {
      const link = document.getElementById("ytlink").value;
      const videoId = getVideoId(link);
      const output = document.getElementById("output");
      const codeOutput = document.getElementById("code-output");
      const codeText = document.getElementById("code-text");

      output.innerHTML = "Loading...";
      codeOutput.style.display = "none";

      if (!videoId) {
        output.innerHTML = "Invalid YouTube URL";
        return;
      }

      const apiUrl = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${videoId}&key=${API_KEY}`;

      try {
        const res = await fetch(apiUrl);
        const data = await res.json();

        if (!data.items || data.items.length === 0) {
          output.innerHTML = "Video not found.";
          return;
        }

        const video = data.items[0];
        const { title, channelTitle, thumbnails, publishedAt } = video.snippet;
        const durationISO = video.contentDetails.duration;
        const views = video.statistics.viewCount;

        const duration = formatDuration(durationISO);
        const thumbnail = thumbnails.medium.url;
        const viewsFormatted = Number(views).toLocaleString();
        const timeAgo = timeSince(new Date(publishedAt));

        const html = `
          <div class="video-card">
            <div class="thumbnail">
              <a href="https://www.youtube.com/watch?v=${videoId}" target="_blank">
                <img src="${thumbnail}" alt="Thumbnail">
                <div class="duration">${duration}</div>
              </a>
            </div>
            <div class="info">
              <a class="title" href="https://www.youtube.com/watch?v=${videoId}" target="_blank">${title}</a>
              <div class="channel-name">${channelTitle}</div>
              <div class="meta">${viewsFormatted} views â€¢ ${timeAgo}</div>
            </div>
          </div>
        `;

        output.innerHTML = html;

        // Generate HTML code for copying
        const code = `
          <ytd-compact-video-renderer>
            <a href="https://www.youtube.com/watch?v=${videoId}" target="_blank">
              <img src="${thumbnail}" alt="Thumbnail" width="168" height="94">
              <div class="info">
                <h3>${title}</h3>
                <p>${channelTitle} | ${viewsFormatted} views | ${timeAgo}</p>
              </div>
            </a>
          </ytd-compact-video-renderer>
        `;
        codeText.innerText = code;
        codeOutput.style.display = "block";

      } catch (err) {
        output.innerHTML = "Failed to fetch video data.";
      }
    }

    function formatDuration(iso) {
      const match = iso.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
      const h = match[1] ? match[1] + ":" : "";
      const m = match[2] ? String(match[2]).padStart(h ? 2 : 1, "0") : "0";
      const s = match[3] ? String(match[3]).padStart(2, "0") : "00";
      return `${h}${m}:${s}`;
    }

    function timeSince(date) {
      const seconds = Math.floor((new Date() - date) / 1000);
      const intervals = [
        { label: 'year', seconds: 31536000 },
        { label: 'month', seconds: 2592000 },
        { label: 'day', seconds: 86400 },
        { label: 'hour', seconds: 3600 },
        { label: 'minute', seconds: 60 },
        { label: 'second', seconds: 1 }
      ];
      for (let i = 0; i < intervals.length; i++) {
        const interval = Math.floor(seconds / intervals[i].seconds);
        if (interval > 1) {
          return `${interval} ${intervals[i].label}s ago`;
        } else if (interval === 1) {
          return `1 ${intervals[i].label} ago`;
        }
      }
      return "Just now";
    }

    function clearOutput() {
      document.getElementById("ytlink").value = '';
      document.getElementById("output").innerHTML = '';
      document.getElementById("code-output").style.display = 'none';
    }

    function copyCode() {
      const code = document.getElementById("code-text").innerText;
      navigator.clipboard.writeText(code).then(() => {
        alert("Code copied to clipboard!");
      }).catch((err) => {
        alert("Failed to copy code: " + err);
      });
    }
  </script>

</body>
</html>
